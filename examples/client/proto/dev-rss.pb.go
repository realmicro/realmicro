// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dev-rss.proto

/*
	Package dev_rss is a generated protocol buffer package.

	It is generated from these files:
		dev-rss.proto

	It has these top-level messages:
		Status
		Category
		Author
		AuthorCategory
		InclusionAuthor
		Article
		AuthorArticle
		AuthorPubArticle
		UploadMsgRequest
		UploadMsgResponse
		GetCategoryListRequest
		GetCategoryListResponse
		GetCategoryArticleListRequest
		GetCategoryArticleListResponse
		GetUserFollowArticleListRequest
		GetUserFollowArticleListResponse
		GetArticleDetailRequest
		GetArticleDetailResponse
		GetArticleShareRequest
		GetArticleShareResponse
		ArticleCollectStatusRequest
		ArticleCollectStatusResponse
		ArticleCollectUncollectRequest
		ArticleCollectUncollectResponse
		SearchAuthorRequest
		SearchAuthorResponse
		GetHotSearchRequest
		GetHotSearchResponse
		GetAuthorDetailRequest
		GetAuthorDetailResponse
		GetAuthorArticleListRequest
		GetAuthorArticleListResponse
		UserFollowUnfollowRequest
		UserFollowUnfollowResponse
		UserFollowStatusRequest
		UserFollowStatusResponse
		GetUserFollowListRequest
		GetUserFollowListResponse
		GetUserFootprintRequest
		GetUserFootprintResponse
		GetUserCollectListRequest
		GetUserCollectListResponse
		InclusionAuthorRequest
		InclusionAuthorResponse
		CreateCategoryRequest
		CreateCategoryResponse
		CreateAuthorRequest
		CreateAuthorResponse
		UpdateAuthorRequest
		UpdateAuthorResponse
		GetAuthorListRequest
		GetAuthorListResponse
		GetArticleListRequest
		GetArticleListResponse
		UpdateArticleRequest
		UpdateArticleResponse
		GetInclusionAuthorListRequest
		GetInclusionAuthorListResponse
		ConfirmInclusionAuthorRequest
		ConfirmInclusionAuthorResponse
*/
package dev_rss

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_status_success        StatusCode = 0
	StatusCode_status_internal_error StatusCode = 1
	StatusCode_status_param_error    StatusCode = 2
)

var StatusCode_name = map[int32]string{
	0: "status_success",
	1: "status_internal_error",
	2: "status_param_error",
}
var StatusCode_value = map[string]int32{
	"status_success":        0,
	"status_internal_error": 1,
	"status_param_error":    2,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{0} }

type UploadType int32

const (
	UploadType_receive_msg_type UploadType = 0
	UploadType_receive_author   UploadType = 1
)

var UploadType_name = map[int32]string{
	0: "receive_msg_type",
	1: "receive_author",
}
var UploadType_value = map[string]int32{
	"receive_msg_type": 0,
	"receive_author":   1,
}

func (x UploadType) String() string {
	return proto.EnumName(UploadType_name, int32(x))
}
func (UploadType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{1} }

type ArticleCollect int32

const (
	ArticleCollect_article_collect   ArticleCollect = 0
	ArticleCollect_article_uncollect ArticleCollect = 1
)

var ArticleCollect_name = map[int32]string{
	0: "article_collect",
	1: "article_uncollect",
}
var ArticleCollect_value = map[string]int32{
	"article_collect":   0,
	"article_uncollect": 1,
}

func (x ArticleCollect) String() string {
	return proto.EnumName(ArticleCollect_name, int32(x))
}
func (ArticleCollect) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{2} }

type UserFollow int32

const (
	UserFollow_user_follow   UserFollow = 0
	UserFollow_user_unfollow UserFollow = 1
)

var UserFollow_name = map[int32]string{
	0: "user_follow",
	1: "user_unfollow",
}
var UserFollow_value = map[string]int32{
	"user_follow":   0,
	"user_unfollow": 1,
}

func (x UserFollow) String() string {
	return proto.EnumName(UserFollow_name, int32(x))
}
func (UserFollow) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{3} }

type InclusionStatus int32

const (
	InclusionStatus_inclusion_alreay_in InclusionStatus = 0
	InclusionStatus_inclusion_success   InclusionStatus = 1
)

var InclusionStatus_name = map[int32]string{
	0: "inclusion_alreay_in",
	1: "inclusion_success",
}
var InclusionStatus_value = map[string]int32{
	"inclusion_alreay_in": 0,
	"inclusion_success":   1,
}

func (x InclusionStatus) String() string {
	return proto.EnumName(InclusionStatus_name, int32(x))
}
func (InclusionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{4} }

type UpdateAuthorType int32

const (
	UpdateAuthorType_update_author_category_id UpdateAuthorType = 0
)

var UpdateAuthorType_name = map[int32]string{
	0: "update_author_category_id",
}
var UpdateAuthorType_value = map[string]int32{
	"update_author_category_id": 0,
}

func (x UpdateAuthorType) String() string {
	return proto.EnumName(UpdateAuthorType_name, int32(x))
}
func (UpdateAuthorType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{5} }

type UpdateArticleType int32

const (
	UpdateArticleType_update_is_ad       UpdateArticleType = 0
	UpdateArticleType_update_category_id UpdateArticleType = 1
	UpdateArticleType_update_is_chosen   UpdateArticleType = 2
)

var UpdateArticleType_name = map[int32]string{
	0: "update_is_ad",
	1: "update_category_id",
	2: "update_is_chosen",
}
var UpdateArticleType_value = map[string]int32{
	"update_is_ad":       0,
	"update_category_id": 1,
	"update_is_chosen":   2,
}

func (x UpdateArticleType) String() string {
	return proto.EnumName(UpdateArticleType_name, int32(x))
}
func (UpdateArticleType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{6} }

type Status struct {
	Code StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=dev_rss.StatusCode" json:"code"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{0} }

type Category struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Category) Reset()                    { *m = Category{} }
func (m *Category) String() string            { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()               {}
func (*Category) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{1} }

type Author struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar     string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	IsFollowed bool   `protobuf:"varint,8,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed"`
}

func (m *Author) Reset()                    { *m = Author{} }
func (m *Author) String() string            { return proto.CompactTextString(m) }
func (*Author) ProtoMessage()               {}
func (*Author) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{2} }

type AuthorCategory struct {
	Author   *Author   `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Category *Category `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
}

func (m *AuthorCategory) Reset()                    { *m = AuthorCategory{} }
func (m *AuthorCategory) String() string            { return proto.CompactTextString(m) }
func (*AuthorCategory) ProtoMessage()               {}
func (*AuthorCategory) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{3} }

type InclusionAuthor struct {
	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status"`
}

func (m *InclusionAuthor) Reset()                    { *m = InclusionAuthor{} }
func (m *InclusionAuthor) String() string            { return proto.CompactTextString(m) }
func (*InclusionAuthor) ProtoMessage()               {}
func (*InclusionAuthor) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{4} }

type Article struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Summary    string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	CoverSmall string `protobuf:"bytes,4,opt,name=cover_small,json=coverSmall,proto3" json:"cover_small,omitempty"`
	CoverBig   string `protobuf:"bytes,5,opt,name=cover_big,json=coverBig,proto3" json:"cover_big,omitempty"`
	Detail     string `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`
	Timestamp  int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	VisitTime  int64  `protobuf:"varint,8,opt,name=visit_time,json=visitTime,proto3" json:"visit_time,omitempty"`
	IsAd       bool   `protobuf:"varint,9,opt,name=is_ad,json=isAd,proto3" json:"is_ad"`
	IsChosen   bool   `protobuf:"varint,10,opt,name=is_chosen,json=isChosen,proto3" json:"is_chosen"`
	QrcodeUrl  string `protobuf:"bytes,11,opt,name=qrcode_url,json=qrcodeUrl,proto3" json:"qrcode_url,omitempty"`
	SrcLink    string `protobuf:"bytes,12,opt,name=src_link,json=srcLink,proto3" json:"src_link,omitempty"`
}

func (m *Article) Reset()                    { *m = Article{} }
func (m *Article) String() string            { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()               {}
func (*Article) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{5} }

type AuthorArticle struct {
	Author   *Author   `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Article  *Article  `protobuf:"bytes,2,opt,name=article" json:"article,omitempty"`
	Category *Category `protobuf:"bytes,3,opt,name=category" json:"category,omitempty"`
}

func (m *AuthorArticle) Reset()                    { *m = AuthorArticle{} }
func (m *AuthorArticle) String() string            { return proto.CompactTextString(m) }
func (*AuthorArticle) ProtoMessage()               {}
func (*AuthorArticle) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{6} }

type AuthorPubArticle struct {
	Author *Author    `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	List   []*Article `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *AuthorPubArticle) Reset()                    { *m = AuthorPubArticle{} }
func (m *AuthorPubArticle) String() string            { return proto.CompactTextString(m) }
func (*AuthorPubArticle) ProtoMessage()               {}
func (*AuthorPubArticle) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{7} }

type UploadMsgRequest struct {
	UploadType     UploadType `protobuf:"varint,1,opt,name=upload_type,json=uploadType,proto3,enum=dev_rss.UploadType" json:"upload_type,omitempty"`
	MsgType        int64      `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	Content        string     `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	FromUserName   string     `protobuf:"bytes,4,opt,name=from_user_name,json=fromUserName,proto3" json:"from_user_name,omitempty"`
	FromNickName   string     `protobuf:"bytes,5,opt,name=from_nick_name,json=fromNickName,proto3" json:"from_nick_name,omitempty"`
	FromHeadImgUrl string     `protobuf:"bytes,6,opt,name=from_head_img_url,json=fromHeadImgUrl,proto3" json:"from_head_img_url,omitempty"`
}

func (m *UploadMsgRequest) Reset()                    { *m = UploadMsgRequest{} }
func (m *UploadMsgRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadMsgRequest) ProtoMessage()               {}
func (*UploadMsgRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{8} }

type UploadMsgResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *UploadMsgResponse) Reset()                    { *m = UploadMsgResponse{} }
func (m *UploadMsgResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadMsgResponse) ProtoMessage()               {}
func (*UploadMsgResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{9} }

type GetCategoryListRequest struct {
}

func (m *GetCategoryListRequest) Reset()                    { *m = GetCategoryListRequest{} }
func (m *GetCategoryListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCategoryListRequest) ProtoMessage()               {}
func (*GetCategoryListRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{10} }

type GetCategoryListResponse struct {
	Status *Status     `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*Category `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetCategoryListResponse) Reset()                    { *m = GetCategoryListResponse{} }
func (m *GetCategoryListResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCategoryListResponse) ProtoMessage()               {}
func (*GetCategoryListResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{11} }

type GetCategoryArticleListRequest struct {
	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsChosen   bool  `protobuf:"varint,2,opt,name=is_chosen,json=isChosen,proto3" json:"is_chosen,omitempty"`
	CategoryId int64 `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Offset     int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Num        int64 `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetCategoryArticleListRequest) Reset()         { *m = GetCategoryArticleListRequest{} }
func (m *GetCategoryArticleListRequest) String() string { return proto.CompactTextString(m) }
func (*GetCategoryArticleListRequest) ProtoMessage()    {}
func (*GetCategoryArticleListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{12}
}

type GetCategoryArticleListResponse struct {
	Status *Status          `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*AuthorArticle `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetCategoryArticleListResponse) Reset()         { *m = GetCategoryArticleListResponse{} }
func (m *GetCategoryArticleListResponse) String() string { return proto.CompactTextString(m) }
func (*GetCategoryArticleListResponse) ProtoMessage()    {}
func (*GetCategoryArticleListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{13}
}

type GetUserFollowArticleListRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Num    int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetUserFollowArticleListRequest) Reset()         { *m = GetUserFollowArticleListRequest{} }
func (m *GetUserFollowArticleListRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserFollowArticleListRequest) ProtoMessage()    {}
func (*GetUserFollowArticleListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{14}
}

type GetUserFollowArticleListResponse struct {
	Status *Status             `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*AuthorPubArticle `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetUserFollowArticleListResponse) Reset()         { *m = GetUserFollowArticleListResponse{} }
func (m *GetUserFollowArticleListResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserFollowArticleListResponse) ProtoMessage()    {}
func (*GetUserFollowArticleListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{15}
}

type GetArticleDetailRequest struct {
	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ArticleId int64 `protobuf:"varint,2,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (m *GetArticleDetailRequest) Reset()                    { *m = GetArticleDetailRequest{} }
func (m *GetArticleDetailRequest) String() string            { return proto.CompactTextString(m) }
func (*GetArticleDetailRequest) ProtoMessage()               {}
func (*GetArticleDetailRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{16} }

type GetArticleDetailResponse struct {
	Status  *Status        `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Article *AuthorArticle `protobuf:"bytes,2,opt,name=article" json:"article,omitempty"`
}

func (m *GetArticleDetailResponse) Reset()                    { *m = GetArticleDetailResponse{} }
func (m *GetArticleDetailResponse) String() string            { return proto.CompactTextString(m) }
func (*GetArticleDetailResponse) ProtoMessage()               {}
func (*GetArticleDetailResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{17} }

type GetArticleShareRequest struct {
	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ArticleId int64 `protobuf:"varint,2,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (m *GetArticleShareRequest) Reset()                    { *m = GetArticleShareRequest{} }
func (m *GetArticleShareRequest) String() string            { return proto.CompactTextString(m) }
func (*GetArticleShareRequest) ProtoMessage()               {}
func (*GetArticleShareRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{18} }

type GetArticleShareResponse struct {
	Status  *Status        `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Article *AuthorArticle `protobuf:"bytes,2,opt,name=article" json:"article,omitempty"`
}

func (m *GetArticleShareResponse) Reset()                    { *m = GetArticleShareResponse{} }
func (m *GetArticleShareResponse) String() string            { return proto.CompactTextString(m) }
func (*GetArticleShareResponse) ProtoMessage()               {}
func (*GetArticleShareResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{19} }

type ArticleCollectStatusRequest struct {
	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ArticleId int64 `protobuf:"varint,2,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (m *ArticleCollectStatusRequest) Reset()         { *m = ArticleCollectStatusRequest{} }
func (m *ArticleCollectStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ArticleCollectStatusRequest) ProtoMessage()    {}
func (*ArticleCollectStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{20}
}

type ArticleCollectStatusResponse struct {
	Status        *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	CollectStatus bool    `protobuf:"varint,2,opt,name=collect_status,json=collectStatus,proto3" json:"collect_status"`
}

func (m *ArticleCollectStatusResponse) Reset()         { *m = ArticleCollectStatusResponse{} }
func (m *ArticleCollectStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleCollectStatusResponse) ProtoMessage()    {}
func (*ArticleCollectStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{21}
}

type ArticleCollectUncollectRequest struct {
	UserId    int64          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ArticleId int64          `protobuf:"varint,2,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	Collect   ArticleCollect `protobuf:"varint,3,opt,name=collect,proto3,enum=dev_rss.ArticleCollect" json:"collect,omitempty"`
}

func (m *ArticleCollectUncollectRequest) Reset()         { *m = ArticleCollectUncollectRequest{} }
func (m *ArticleCollectUncollectRequest) String() string { return proto.CompactTextString(m) }
func (*ArticleCollectUncollectRequest) ProtoMessage()    {}
func (*ArticleCollectUncollectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{22}
}

type ArticleCollectUncollectResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *ArticleCollectUncollectResponse) Reset()         { *m = ArticleCollectUncollectResponse{} }
func (m *ArticleCollectUncollectResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleCollectUncollectResponse) ProtoMessage()    {}
func (*ArticleCollectUncollectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{23}
}

type SearchAuthorRequest struct {
	UserId  int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (m *SearchAuthorRequest) Reset()                    { *m = SearchAuthorRequest{} }
func (m *SearchAuthorRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchAuthorRequest) ProtoMessage()               {}
func (*SearchAuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{24} }

type SearchAuthorResponse struct {
	Status *Status   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*Author `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *SearchAuthorResponse) Reset()                    { *m = SearchAuthorResponse{} }
func (m *SearchAuthorResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchAuthorResponse) ProtoMessage()               {}
func (*SearchAuthorResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{25} }

type GetHotSearchRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetHotSearchRequest) Reset()                    { *m = GetHotSearchRequest{} }
func (m *GetHotSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHotSearchRequest) ProtoMessage()               {}
func (*GetHotSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{26} }

type GetHotSearchResponse struct {
	Status *Status   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*Author `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetHotSearchResponse) Reset()                    { *m = GetHotSearchResponse{} }
func (m *GetHotSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHotSearchResponse) ProtoMessage()               {}
func (*GetHotSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{27} }

type GetAuthorDetailRequest struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthorId int64 `protobuf:"varint,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (m *GetAuthorDetailRequest) Reset()                    { *m = GetAuthorDetailRequest{} }
func (m *GetAuthorDetailRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAuthorDetailRequest) ProtoMessage()               {}
func (*GetAuthorDetailRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{28} }

type GetAuthorDetailResponse struct {
	Status     *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Author     *Author `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	IfFollowed bool    `protobuf:"varint,3,opt,name=if_followed,json=ifFollowed,proto3" json:"if_followed"`
}

func (m *GetAuthorDetailResponse) Reset()                    { *m = GetAuthorDetailResponse{} }
func (m *GetAuthorDetailResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAuthorDetailResponse) ProtoMessage()               {}
func (*GetAuthorDetailResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{29} }

type GetAuthorArticleListRequest struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthorId int64 `protobuf:"varint,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Offset   int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Num      int64 `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetAuthorArticleListRequest) Reset()         { *m = GetAuthorArticleListRequest{} }
func (m *GetAuthorArticleListRequest) String() string { return proto.CompactTextString(m) }
func (*GetAuthorArticleListRequest) ProtoMessage()    {}
func (*GetAuthorArticleListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{30}
}

type GetAuthorArticleListResponse struct {
	Status *Status    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*Article `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetAuthorArticleListResponse) Reset()         { *m = GetAuthorArticleListResponse{} }
func (m *GetAuthorArticleListResponse) String() string { return proto.CompactTextString(m) }
func (*GetAuthorArticleListResponse) ProtoMessage()    {}
func (*GetAuthorArticleListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{31}
}

type UserFollowUnfollowRequest struct {
	UserId   int64      `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthorId int64      `protobuf:"varint,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Follow   UserFollow `protobuf:"varint,3,opt,name=follow,proto3,enum=dev_rss.UserFollow" json:"follow,omitempty"`
}

func (m *UserFollowUnfollowRequest) Reset()         { *m = UserFollowUnfollowRequest{} }
func (m *UserFollowUnfollowRequest) String() string { return proto.CompactTextString(m) }
func (*UserFollowUnfollowRequest) ProtoMessage()    {}
func (*UserFollowUnfollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{32}
}

type UserFollowUnfollowResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *UserFollowUnfollowResponse) Reset()         { *m = UserFollowUnfollowResponse{} }
func (m *UserFollowUnfollowResponse) String() string { return proto.CompactTextString(m) }
func (*UserFollowUnfollowResponse) ProtoMessage()    {}
func (*UserFollowUnfollowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{33}
}

type UserFollowStatusRequest struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthorId int64 `protobuf:"varint,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (m *UserFollowStatusRequest) Reset()                    { *m = UserFollowStatusRequest{} }
func (m *UserFollowStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UserFollowStatusRequest) ProtoMessage()               {}
func (*UserFollowStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{34} }

type UserFollowStatusResponse struct {
	Status       *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	FollowStatus bool    `protobuf:"varint,2,opt,name=follow_status,json=followStatus,proto3" json:"follow_status"`
}

func (m *UserFollowStatusResponse) Reset()                    { *m = UserFollowStatusResponse{} }
func (m *UserFollowStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*UserFollowStatusResponse) ProtoMessage()               {}
func (*UserFollowStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{35} }

type GetUserFollowListRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Num    int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetUserFollowListRequest) Reset()                    { *m = GetUserFollowListRequest{} }
func (m *GetUserFollowListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserFollowListRequest) ProtoMessage()               {}
func (*GetUserFollowListRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{36} }

type GetUserFollowListResponse struct {
	Status *Status   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*Author `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetUserFollowListResponse) Reset()         { *m = GetUserFollowListResponse{} }
func (m *GetUserFollowListResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserFollowListResponse) ProtoMessage()    {}
func (*GetUserFollowListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{37}
}

type GetUserFootprintRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Num    int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetUserFootprintRequest) Reset()                    { *m = GetUserFootprintRequest{} }
func (m *GetUserFootprintRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserFootprintRequest) ProtoMessage()               {}
func (*GetUserFootprintRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{38} }

type GetUserFootprintResponse struct {
	Status *Status    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*Article `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetUserFootprintResponse) Reset()                    { *m = GetUserFootprintResponse{} }
func (m *GetUserFootprintResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserFootprintResponse) ProtoMessage()               {}
func (*GetUserFootprintResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{39} }

type GetUserCollectListRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Num    int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetUserCollectListRequest) Reset()         { *m = GetUserCollectListRequest{} }
func (m *GetUserCollectListRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserCollectListRequest) ProtoMessage()    {}
func (*GetUserCollectListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{40}
}

type GetUserCollectListResponse struct {
	Status *Status    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*Article `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetUserCollectListResponse) Reset()         { *m = GetUserCollectListResponse{} }
func (m *GetUserCollectListResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserCollectListResponse) ProtoMessage()    {}
func (*GetUserCollectListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{41}
}

type InclusionAuthorRequest struct {
	UserId     int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CategoryId int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *InclusionAuthorRequest) Reset()                    { *m = InclusionAuthorRequest{} }
func (m *InclusionAuthorRequest) String() string            { return proto.CompactTextString(m) }
func (*InclusionAuthorRequest) ProtoMessage()               {}
func (*InclusionAuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{42} }

type InclusionAuthorResponse struct {
	Status          *Status         `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	InclusionStatus InclusionStatus `protobuf:"varint,2,opt,name=inclusion_status,json=inclusionStatus,proto3,enum=dev_rss.InclusionStatus" json:"inclusion_status"`
}

func (m *InclusionAuthorResponse) Reset()                    { *m = InclusionAuthorResponse{} }
func (m *InclusionAuthorResponse) String() string            { return proto.CompactTextString(m) }
func (*InclusionAuthorResponse) ProtoMessage()               {}
func (*InclusionAuthorResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{43} }

// =================== backend req/rsp ===================
type CreateCategoryRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateCategoryRequest) Reset()                    { *m = CreateCategoryRequest{} }
func (m *CreateCategoryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCategoryRequest) ProtoMessage()               {}
func (*CreateCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{44} }

type CreateCategoryResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CreateCategoryResponse) Reset()                    { *m = CreateCategoryResponse{} }
func (m *CreateCategoryResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateCategoryResponse) ProtoMessage()               {}
func (*CreateCategoryResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{45} }

type CreateAuthorRequest struct {
	CategoryId int64  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateAuthorRequest) Reset()                    { *m = CreateAuthorRequest{} }
func (m *CreateAuthorRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAuthorRequest) ProtoMessage()               {}
func (*CreateAuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{46} }

type CreateAuthorResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CreateAuthorResponse) Reset()                    { *m = CreateAuthorResponse{} }
func (m *CreateAuthorResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAuthorResponse) ProtoMessage()               {}
func (*CreateAuthorResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{47} }

type UpdateAuthorRequest struct {
	AuthorId   int64            `protobuf:"varint,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	UpdateType UpdateAuthorType `protobuf:"varint,2,opt,name=update_type,json=updateType,proto3,enum=dev_rss.UpdateAuthorType" json:"update_type,omitempty"`
	CategoryId int64            `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (m *UpdateAuthorRequest) Reset()                    { *m = UpdateAuthorRequest{} }
func (m *UpdateAuthorRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAuthorRequest) ProtoMessage()               {}
func (*UpdateAuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{48} }

type UpdateAuthorResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *UpdateAuthorResponse) Reset()                    { *m = UpdateAuthorResponse{} }
func (m *UpdateAuthorResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAuthorResponse) ProtoMessage()               {}
func (*UpdateAuthorResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{49} }

type GetAuthorListRequest struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetAuthorListRequest) Reset()                    { *m = GetAuthorListRequest{} }
func (m *GetAuthorListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAuthorListRequest) ProtoMessage()               {}
func (*GetAuthorListRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{50} }

type GetAuthorListResponse struct {
	Status *Status           `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*AuthorCategory `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetAuthorListResponse) Reset()                    { *m = GetAuthorListResponse{} }
func (m *GetAuthorListResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAuthorListResponse) ProtoMessage()               {}
func (*GetAuthorListResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{51} }

type GetArticleListRequest struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetArticleListRequest) Reset()                    { *m = GetArticleListRequest{} }
func (m *GetArticleListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetArticleListRequest) ProtoMessage()               {}
func (*GetArticleListRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{52} }

type GetArticleListResponse struct {
	Status *Status          `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*AuthorArticle `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetArticleListResponse) Reset()                    { *m = GetArticleListResponse{} }
func (m *GetArticleListResponse) String() string            { return proto.CompactTextString(m) }
func (*GetArticleListResponse) ProtoMessage()               {}
func (*GetArticleListResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{53} }

type UpdateArticleRequest struct {
	ArticleId  int64             `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	UpdateType UpdateArticleType `protobuf:"varint,2,opt,name=update_type,json=updateType,proto3,enum=dev_rss.UpdateArticleType" json:"update_type,omitempty"`
	IsAd       int64             `protobuf:"varint,3,opt,name=is_ad,json=isAd,proto3" json:"is_ad,omitempty"`
	CategoryId int64             `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	IsChosen   int64             `protobuf:"varint,5,opt,name=is_chosen,json=isChosen,proto3" json:"is_chosen,omitempty"`
}

func (m *UpdateArticleRequest) Reset()                    { *m = UpdateArticleRequest{} }
func (m *UpdateArticleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateArticleRequest) ProtoMessage()               {}
func (*UpdateArticleRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{54} }

type UpdateArticleResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *UpdateArticleResponse) Reset()                    { *m = UpdateArticleResponse{} }
func (m *UpdateArticleResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateArticleResponse) ProtoMessage()               {}
func (*UpdateArticleResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevRss, []int{55} }

type GetInclusionAuthorListRequest struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetInclusionAuthorListRequest) Reset()         { *m = GetInclusionAuthorListRequest{} }
func (m *GetInclusionAuthorListRequest) String() string { return proto.CompactTextString(m) }
func (*GetInclusionAuthorListRequest) ProtoMessage()    {}
func (*GetInclusionAuthorListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{56}
}

type GetInclusionAuthorListResponse struct {
	Status *Status            `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*InclusionAuthor `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *GetInclusionAuthorListResponse) Reset()         { *m = GetInclusionAuthorListResponse{} }
func (m *GetInclusionAuthorListResponse) String() string { return proto.CompactTextString(m) }
func (*GetInclusionAuthorListResponse) ProtoMessage()    {}
func (*GetInclusionAuthorListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{57}
}

type ConfirmInclusionAuthorRequest struct {
	InclusionAuthorId int64 `protobuf:"varint,1,opt,name=inclusion_author_id,json=inclusionAuthorId,proto3" json:"inclusion_author_id,omitempty"`
	CategoryId        int64 `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (m *ConfirmInclusionAuthorRequest) Reset()         { *m = ConfirmInclusionAuthorRequest{} }
func (m *ConfirmInclusionAuthorRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmInclusionAuthorRequest) ProtoMessage()    {}
func (*ConfirmInclusionAuthorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{58}
}

type ConfirmInclusionAuthorResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *ConfirmInclusionAuthorResponse) Reset()         { *m = ConfirmInclusionAuthorResponse{} }
func (m *ConfirmInclusionAuthorResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmInclusionAuthorResponse) ProtoMessage()    {}
func (*ConfirmInclusionAuthorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDevRss, []int{59}
}

func init() {
	proto.RegisterType((*Status)(nil), "dev_rss.Status")
	proto.RegisterType((*Category)(nil), "dev_rss.Category")
	proto.RegisterType((*Author)(nil), "dev_rss.Author")
	proto.RegisterType((*AuthorCategory)(nil), "dev_rss.AuthorCategory")
	proto.RegisterType((*InclusionAuthor)(nil), "dev_rss.InclusionAuthor")
	proto.RegisterType((*Article)(nil), "dev_rss.Article")
	proto.RegisterType((*AuthorArticle)(nil), "dev_rss.AuthorArticle")
	proto.RegisterType((*AuthorPubArticle)(nil), "dev_rss.AuthorPubArticle")
	proto.RegisterType((*UploadMsgRequest)(nil), "dev_rss.UploadMsgRequest")
	proto.RegisterType((*UploadMsgResponse)(nil), "dev_rss.UploadMsgResponse")
	proto.RegisterType((*GetCategoryListRequest)(nil), "dev_rss.GetCategoryListRequest")
	proto.RegisterType((*GetCategoryListResponse)(nil), "dev_rss.GetCategoryListResponse")
	proto.RegisterType((*GetCategoryArticleListRequest)(nil), "dev_rss.GetCategoryArticleListRequest")
	proto.RegisterType((*GetCategoryArticleListResponse)(nil), "dev_rss.GetCategoryArticleListResponse")
	proto.RegisterType((*GetUserFollowArticleListRequest)(nil), "dev_rss.GetUserFollowArticleListRequest")
	proto.RegisterType((*GetUserFollowArticleListResponse)(nil), "dev_rss.GetUserFollowArticleListResponse")
	proto.RegisterType((*GetArticleDetailRequest)(nil), "dev_rss.GetArticleDetailRequest")
	proto.RegisterType((*GetArticleDetailResponse)(nil), "dev_rss.GetArticleDetailResponse")
	proto.RegisterType((*GetArticleShareRequest)(nil), "dev_rss.GetArticleShareRequest")
	proto.RegisterType((*GetArticleShareResponse)(nil), "dev_rss.GetArticleShareResponse")
	proto.RegisterType((*ArticleCollectStatusRequest)(nil), "dev_rss.ArticleCollectStatusRequest")
	proto.RegisterType((*ArticleCollectStatusResponse)(nil), "dev_rss.ArticleCollectStatusResponse")
	proto.RegisterType((*ArticleCollectUncollectRequest)(nil), "dev_rss.ArticleCollectUncollectRequest")
	proto.RegisterType((*ArticleCollectUncollectResponse)(nil), "dev_rss.ArticleCollectUncollectResponse")
	proto.RegisterType((*SearchAuthorRequest)(nil), "dev_rss.SearchAuthorRequest")
	proto.RegisterType((*SearchAuthorResponse)(nil), "dev_rss.SearchAuthorResponse")
	proto.RegisterType((*GetHotSearchRequest)(nil), "dev_rss.GetHotSearchRequest")
	proto.RegisterType((*GetHotSearchResponse)(nil), "dev_rss.GetHotSearchResponse")
	proto.RegisterType((*GetAuthorDetailRequest)(nil), "dev_rss.GetAuthorDetailRequest")
	proto.RegisterType((*GetAuthorDetailResponse)(nil), "dev_rss.GetAuthorDetailResponse")
	proto.RegisterType((*GetAuthorArticleListRequest)(nil), "dev_rss.GetAuthorArticleListRequest")
	proto.RegisterType((*GetAuthorArticleListResponse)(nil), "dev_rss.GetAuthorArticleListResponse")
	proto.RegisterType((*UserFollowUnfollowRequest)(nil), "dev_rss.UserFollowUnfollowRequest")
	proto.RegisterType((*UserFollowUnfollowResponse)(nil), "dev_rss.UserFollowUnfollowResponse")
	proto.RegisterType((*UserFollowStatusRequest)(nil), "dev_rss.UserFollowStatusRequest")
	proto.RegisterType((*UserFollowStatusResponse)(nil), "dev_rss.UserFollowStatusResponse")
	proto.RegisterType((*GetUserFollowListRequest)(nil), "dev_rss.GetUserFollowListRequest")
	proto.RegisterType((*GetUserFollowListResponse)(nil), "dev_rss.GetUserFollowListResponse")
	proto.RegisterType((*GetUserFootprintRequest)(nil), "dev_rss.GetUserFootprintRequest")
	proto.RegisterType((*GetUserFootprintResponse)(nil), "dev_rss.GetUserFootprintResponse")
	proto.RegisterType((*GetUserCollectListRequest)(nil), "dev_rss.GetUserCollectListRequest")
	proto.RegisterType((*GetUserCollectListResponse)(nil), "dev_rss.GetUserCollectListResponse")
	proto.RegisterType((*InclusionAuthorRequest)(nil), "dev_rss.InclusionAuthorRequest")
	proto.RegisterType((*InclusionAuthorResponse)(nil), "dev_rss.InclusionAuthorResponse")
	proto.RegisterType((*CreateCategoryRequest)(nil), "dev_rss.CreateCategoryRequest")
	proto.RegisterType((*CreateCategoryResponse)(nil), "dev_rss.CreateCategoryResponse")
	proto.RegisterType((*CreateAuthorRequest)(nil), "dev_rss.CreateAuthorRequest")
	proto.RegisterType((*CreateAuthorResponse)(nil), "dev_rss.CreateAuthorResponse")
	proto.RegisterType((*UpdateAuthorRequest)(nil), "dev_rss.UpdateAuthorRequest")
	proto.RegisterType((*UpdateAuthorResponse)(nil), "dev_rss.UpdateAuthorResponse")
	proto.RegisterType((*GetAuthorListRequest)(nil), "dev_rss.GetAuthorListRequest")
	proto.RegisterType((*GetAuthorListResponse)(nil), "dev_rss.GetAuthorListResponse")
	proto.RegisterType((*GetArticleListRequest)(nil), "dev_rss.GetArticleListRequest")
	proto.RegisterType((*GetArticleListResponse)(nil), "dev_rss.GetArticleListResponse")
	proto.RegisterType((*UpdateArticleRequest)(nil), "dev_rss.UpdateArticleRequest")
	proto.RegisterType((*UpdateArticleResponse)(nil), "dev_rss.UpdateArticleResponse")
	proto.RegisterType((*GetInclusionAuthorListRequest)(nil), "dev_rss.GetInclusionAuthorListRequest")
	proto.RegisterType((*GetInclusionAuthorListResponse)(nil), "dev_rss.GetInclusionAuthorListResponse")
	proto.RegisterType((*ConfirmInclusionAuthorRequest)(nil), "dev_rss.ConfirmInclusionAuthorRequest")
	proto.RegisterType((*ConfirmInclusionAuthorResponse)(nil), "dev_rss.ConfirmInclusionAuthorResponse")
	proto.RegisterEnum("dev_rss.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("dev_rss.UploadType", UploadType_name, UploadType_value)
	proto.RegisterEnum("dev_rss.ArticleCollect", ArticleCollect_name, ArticleCollect_value)
	proto.RegisterEnum("dev_rss.UserFollow", UserFollow_name, UserFollow_value)
	proto.RegisterEnum("dev_rss.InclusionStatus", InclusionStatus_name, InclusionStatus_value)
	proto.RegisterEnum("dev_rss.UpdateAuthorType", UpdateAuthorType_name, UpdateAuthorType_value)
	proto.RegisterEnum("dev_rss.UpdateArticleType", UpdateArticleType_name, UpdateArticleType_value)
}
func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *Category) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Category) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Author) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Author) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.IsFollowed {
		dAtA[i] = 0x40
		i++
		if m.IsFollowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AuthorCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorCategory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Author != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Author.Size()))
		n1, err := m.Author.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Category != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Category.Size()))
		n2, err := m.Category.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *InclusionAuthor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InclusionAuthor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *Article) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Article) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Summary) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Summary)))
		i += copy(dAtA[i:], m.Summary)
	}
	if len(m.CoverSmall) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.CoverSmall)))
		i += copy(dAtA[i:], m.CoverSmall)
	}
	if len(m.CoverBig) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.CoverBig)))
		i += copy(dAtA[i:], m.CoverBig)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Timestamp))
	}
	if m.VisitTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.VisitTime))
	}
	if m.IsAd {
		dAtA[i] = 0x48
		i++
		if m.IsAd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsChosen {
		dAtA[i] = 0x50
		i++
		if m.IsChosen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.QrcodeUrl) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.QrcodeUrl)))
		i += copy(dAtA[i:], m.QrcodeUrl)
	}
	if len(m.SrcLink) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.SrcLink)))
		i += copy(dAtA[i:], m.SrcLink)
	}
	return i, nil
}

func (m *AuthorArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorArticle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Author != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Author.Size()))
		n3, err := m.Author.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Article != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Article.Size()))
		n4, err := m.Article.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Category != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Category.Size()))
		n5, err := m.Category.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AuthorPubArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorPubArticle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Author != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Author.Size()))
		n6, err := m.Author.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UploadMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UploadType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UploadType))
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.MsgType))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.FromUserName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.FromUserName)))
		i += copy(dAtA[i:], m.FromUserName)
	}
	if len(m.FromNickName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.FromNickName)))
		i += copy(dAtA[i:], m.FromNickName)
	}
	if len(m.FromHeadImgUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.FromHeadImgUrl)))
		i += copy(dAtA[i:], m.FromHeadImgUrl)
	}
	return i, nil
}

func (m *UploadMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n7, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *GetCategoryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoryListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetCategoryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoryListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n8, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetCategoryArticleListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoryArticleListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.IsChosen {
		dAtA[i] = 0x10
		i++
		if m.IsChosen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.CategoryId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetCategoryArticleListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCategoryArticleListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n9, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetUserFollowArticleListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserFollowArticleListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetUserFollowArticleListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserFollowArticleListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetArticleDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArticleDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.ArticleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.ArticleId))
	}
	return i, nil
}

func (m *GetArticleDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArticleDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Article != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Article.Size()))
		n12, err := m.Article.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *GetArticleShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArticleShareRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.ArticleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.ArticleId))
	}
	return i, nil
}

func (m *GetArticleShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArticleShareResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n13, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Article != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Article.Size()))
		n14, err := m.Article.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *ArticleCollectStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleCollectStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.ArticleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.ArticleId))
	}
	return i, nil
}

func (m *ArticleCollectStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleCollectStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n15, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.CollectStatus {
		dAtA[i] = 0x10
		i++
		if m.CollectStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ArticleCollectUncollectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleCollectUncollectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.ArticleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.ArticleId))
	}
	if m.Collect != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Collect))
	}
	return i, nil
}

func (m *ArticleCollectUncollectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleCollectUncollectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n16, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *SearchAuthorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchAuthorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	return i, nil
}

func (m *SearchAuthorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchAuthorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n17, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetHotSearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotSearchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetHotSearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotSearchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n18, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetAuthorDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.AuthorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.AuthorId))
	}
	return i, nil
}

func (m *GetAuthorDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n19, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Author != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Author.Size()))
		n20, err := m.Author.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.IfFollowed {
		dAtA[i] = 0x18
		i++
		if m.IfFollowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetAuthorArticleListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorArticleListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.AuthorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.AuthorId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetAuthorArticleListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorArticleListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n21, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserFollowUnfollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserFollowUnfollowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.AuthorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.AuthorId))
	}
	if m.Follow != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Follow))
	}
	return i, nil
}

func (m *UserFollowUnfollowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserFollowUnfollowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n22, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *UserFollowStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserFollowStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.AuthorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.AuthorId))
	}
	return i, nil
}

func (m *UserFollowStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserFollowStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n23, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.FollowStatus {
		dAtA[i] = 0x10
		i++
		if m.FollowStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetUserFollowListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserFollowListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetUserFollowListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserFollowListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n24, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetUserFootprintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserFootprintRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetUserFootprintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserFootprintResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n25, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetUserCollectListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserCollectListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetUserCollectListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserCollectListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n26, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InclusionAuthorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InclusionAuthorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UserId))
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.CategoryId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *InclusionAuthorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InclusionAuthorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n27, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.InclusionStatus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.InclusionStatus))
	}
	return i, nil
}

func (m *CreateCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *CreateCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n28, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *CreateAuthorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAuthorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CategoryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.CategoryId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *CreateAuthorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAuthorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n29, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *UpdateAuthorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAuthorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.AuthorId))
	}
	if m.UpdateType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UpdateType))
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.CategoryId))
	}
	return i, nil
}

func (m *UpdateAuthorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAuthorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n30, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *GetAuthorListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetAuthorListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n31, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetArticleListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArticleListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetArticleListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArticleListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n32, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateArticleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateArticleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ArticleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.ArticleId))
	}
	if m.UpdateType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.UpdateType))
	}
	if m.IsAd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.IsAd))
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.CategoryId))
	}
	if m.IsChosen != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.IsChosen))
	}
	return i, nil
}

func (m *UpdateArticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateArticleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n33, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *GetInclusionAuthorListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInclusionAuthorListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Offset))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetInclusionAuthorListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInclusionAuthorListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n34, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevRss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConfirmInclusionAuthorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmInclusionAuthorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InclusionAuthorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.InclusionAuthorId))
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.CategoryId))
	}
	return i, nil
}

func (m *ConfirmInclusionAuthorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmInclusionAuthorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevRss(dAtA, i, uint64(m.Status.Size()))
		n35, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func encodeVarintDevRss(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedStatus(r randyDevRss, easy bool) *Status {
	this := &Status{}
	this.Code = StatusCode([]int32{0, 1, 2}[r.Intn(3)])
	this.Msg = string(randStringDevRss(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCategory(r randyDevRss, easy bool) *Category {
	this := &Category{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Name = string(randStringDevRss(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthor(r randyDevRss, easy bool) *Author {
	this := &Author{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Name = string(randStringDevRss(r))
	this.Avatar = string(randStringDevRss(r))
	this.IsFollowed = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthorCategory(r randyDevRss, easy bool) *AuthorCategory {
	this := &AuthorCategory{}
	if r.Intn(10) != 0 {
		this.Author = NewPopulatedAuthor(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Category = NewPopulatedCategory(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInclusionAuthor(r randyDevRss, easy bool) *InclusionAuthor {
	this := &InclusionAuthor{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Name = string(randStringDevRss(r))
	this.Status = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArticle(r randyDevRss, easy bool) *Article {
	this := &Article{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Title = string(randStringDevRss(r))
	this.Summary = string(randStringDevRss(r))
	this.CoverSmall = string(randStringDevRss(r))
	this.CoverBig = string(randStringDevRss(r))
	this.Detail = string(randStringDevRss(r))
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.VisitTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.VisitTime *= -1
	}
	this.IsAd = bool(bool(r.Intn(2) == 0))
	this.IsChosen = bool(bool(r.Intn(2) == 0))
	this.QrcodeUrl = string(randStringDevRss(r))
	this.SrcLink = string(randStringDevRss(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthorArticle(r randyDevRss, easy bool) *AuthorArticle {
	this := &AuthorArticle{}
	if r.Intn(10) != 0 {
		this.Author = NewPopulatedAuthor(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Article = NewPopulatedArticle(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Category = NewPopulatedCategory(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthorPubArticle(r randyDevRss, easy bool) *AuthorPubArticle {
	this := &AuthorPubArticle{}
	if r.Intn(10) != 0 {
		this.Author = NewPopulatedAuthor(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.List = make([]*Article, v1)
		for i := 0; i < v1; i++ {
			this.List[i] = NewPopulatedArticle(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUploadMsgRequest(r randyDevRss, easy bool) *UploadMsgRequest {
	this := &UploadMsgRequest{}
	this.UploadType = UploadType([]int32{0, 1}[r.Intn(2)])
	this.MsgType = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MsgType *= -1
	}
	this.Content = string(randStringDevRss(r))
	this.FromUserName = string(randStringDevRss(r))
	this.FromNickName = string(randStringDevRss(r))
	this.FromHeadImgUrl = string(randStringDevRss(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUploadMsgResponse(r randyDevRss, easy bool) *UploadMsgResponse {
	this := &UploadMsgResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCategoryListRequest(r randyDevRss, easy bool) *GetCategoryListRequest {
	this := &GetCategoryListRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCategoryListResponse(r randyDevRss, easy bool) *GetCategoryListResponse {
	this := &GetCategoryListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.List = make([]*Category, v2)
		for i := 0; i < v2; i++ {
			this.List[i] = NewPopulatedCategory(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCategoryArticleListRequest(r randyDevRss, easy bool) *GetCategoryArticleListRequest {
	this := &GetCategoryArticleListRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.IsChosen = bool(bool(r.Intn(2) == 0))
	this.CategoryId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CategoryId *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetCategoryArticleListResponse(r randyDevRss, easy bool) *GetCategoryArticleListResponse {
	this := &GetCategoryArticleListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.List = make([]*AuthorArticle, v3)
		for i := 0; i < v3; i++ {
			this.List[i] = NewPopulatedAuthorArticle(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserFollowArticleListRequest(r randyDevRss, easy bool) *GetUserFollowArticleListRequest {
	this := &GetUserFollowArticleListRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserFollowArticleListResponse(r randyDevRss, easy bool) *GetUserFollowArticleListResponse {
	this := &GetUserFollowArticleListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.List = make([]*AuthorPubArticle, v4)
		for i := 0; i < v4; i++ {
			this.List[i] = NewPopulatedAuthorPubArticle(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetArticleDetailRequest(r randyDevRss, easy bool) *GetArticleDetailRequest {
	this := &GetArticleDetailRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.ArticleId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ArticleId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetArticleDetailResponse(r randyDevRss, easy bool) *GetArticleDetailResponse {
	this := &GetArticleDetailResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Article = NewPopulatedAuthorArticle(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetArticleShareRequest(r randyDevRss, easy bool) *GetArticleShareRequest {
	this := &GetArticleShareRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.ArticleId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ArticleId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetArticleShareResponse(r randyDevRss, easy bool) *GetArticleShareResponse {
	this := &GetArticleShareResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Article = NewPopulatedAuthorArticle(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArticleCollectStatusRequest(r randyDevRss, easy bool) *ArticleCollectStatusRequest {
	this := &ArticleCollectStatusRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.ArticleId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ArticleId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArticleCollectStatusResponse(r randyDevRss, easy bool) *ArticleCollectStatusResponse {
	this := &ArticleCollectStatusResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	this.CollectStatus = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArticleCollectUncollectRequest(r randyDevRss, easy bool) *ArticleCollectUncollectRequest {
	this := &ArticleCollectUncollectRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.ArticleId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ArticleId *= -1
	}
	this.Collect = ArticleCollect([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArticleCollectUncollectResponse(r randyDevRss, easy bool) *ArticleCollectUncollectResponse {
	this := &ArticleCollectUncollectResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSearchAuthorRequest(r randyDevRss, easy bool) *SearchAuthorRequest {
	this := &SearchAuthorRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.Keyword = string(randStringDevRss(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSearchAuthorResponse(r randyDevRss, easy bool) *SearchAuthorResponse {
	this := &SearchAuthorResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.List = make([]*Author, v5)
		for i := 0; i < v5; i++ {
			this.List[i] = NewPopulatedAuthor(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetHotSearchRequest(r randyDevRss, easy bool) *GetHotSearchRequest {
	this := &GetHotSearchRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetHotSearchResponse(r randyDevRss, easy bool) *GetHotSearchResponse {
	this := &GetHotSearchResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.List = make([]*Author, v6)
		for i := 0; i < v6; i++ {
			this.List[i] = NewPopulatedAuthor(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAuthorDetailRequest(r randyDevRss, easy bool) *GetAuthorDetailRequest {
	this := &GetAuthorDetailRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.AuthorId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AuthorId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAuthorDetailResponse(r randyDevRss, easy bool) *GetAuthorDetailResponse {
	this := &GetAuthorDetailResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Author = NewPopulatedAuthor(r, easy)
	}
	this.IfFollowed = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAuthorArticleListRequest(r randyDevRss, easy bool) *GetAuthorArticleListRequest {
	this := &GetAuthorArticleListRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.AuthorId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AuthorId *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAuthorArticleListResponse(r randyDevRss, easy bool) *GetAuthorArticleListResponse {
	this := &GetAuthorArticleListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.List = make([]*Article, v7)
		for i := 0; i < v7; i++ {
			this.List[i] = NewPopulatedArticle(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserFollowUnfollowRequest(r randyDevRss, easy bool) *UserFollowUnfollowRequest {
	this := &UserFollowUnfollowRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.AuthorId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AuthorId *= -1
	}
	this.Follow = UserFollow([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserFollowUnfollowResponse(r randyDevRss, easy bool) *UserFollowUnfollowResponse {
	this := &UserFollowUnfollowResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserFollowStatusRequest(r randyDevRss, easy bool) *UserFollowStatusRequest {
	this := &UserFollowStatusRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.AuthorId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AuthorId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserFollowStatusResponse(r randyDevRss, easy bool) *UserFollowStatusResponse {
	this := &UserFollowStatusResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	this.FollowStatus = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserFollowListRequest(r randyDevRss, easy bool) *GetUserFollowListRequest {
	this := &GetUserFollowListRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserFollowListResponse(r randyDevRss, easy bool) *GetUserFollowListResponse {
	this := &GetUserFollowListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.List = make([]*Author, v8)
		for i := 0; i < v8; i++ {
			this.List[i] = NewPopulatedAuthor(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserFootprintRequest(r randyDevRss, easy bool) *GetUserFootprintRequest {
	this := &GetUserFootprintRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserFootprintResponse(r randyDevRss, easy bool) *GetUserFootprintResponse {
	this := &GetUserFootprintResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.List = make([]*Article, v9)
		for i := 0; i < v9; i++ {
			this.List[i] = NewPopulatedArticle(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserCollectListRequest(r randyDevRss, easy bool) *GetUserCollectListRequest {
	this := &GetUserCollectListRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserCollectListResponse(r randyDevRss, easy bool) *GetUserCollectListResponse {
	this := &GetUserCollectListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.List = make([]*Article, v10)
		for i := 0; i < v10; i++ {
			this.List[i] = NewPopulatedArticle(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInclusionAuthorRequest(r randyDevRss, easy bool) *InclusionAuthorRequest {
	this := &InclusionAuthorRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.CategoryId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CategoryId *= -1
	}
	this.Name = string(randStringDevRss(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInclusionAuthorResponse(r randyDevRss, easy bool) *InclusionAuthorResponse {
	this := &InclusionAuthorResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	this.InclusionStatus = InclusionStatus([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateCategoryRequest(r randyDevRss, easy bool) *CreateCategoryRequest {
	this := &CreateCategoryRequest{}
	this.Name = string(randStringDevRss(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateCategoryResponse(r randyDevRss, easy bool) *CreateCategoryResponse {
	this := &CreateCategoryResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateAuthorRequest(r randyDevRss, easy bool) *CreateAuthorRequest {
	this := &CreateAuthorRequest{}
	this.CategoryId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CategoryId *= -1
	}
	this.Name = string(randStringDevRss(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateAuthorResponse(r randyDevRss, easy bool) *CreateAuthorResponse {
	this := &CreateAuthorResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateAuthorRequest(r randyDevRss, easy bool) *UpdateAuthorRequest {
	this := &UpdateAuthorRequest{}
	this.AuthorId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AuthorId *= -1
	}
	this.UpdateType = UpdateAuthorType([]int32{0}[r.Intn(1)])
	this.CategoryId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CategoryId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateAuthorResponse(r randyDevRss, easy bool) *UpdateAuthorResponse {
	this := &UpdateAuthorResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAuthorListRequest(r randyDevRss, easy bool) *GetAuthorListRequest {
	this := &GetAuthorListRequest{}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAuthorListResponse(r randyDevRss, easy bool) *GetAuthorListResponse {
	this := &GetAuthorListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.List = make([]*AuthorCategory, v11)
		for i := 0; i < v11; i++ {
			this.List[i] = NewPopulatedAuthorCategory(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetArticleListRequest(r randyDevRss, easy bool) *GetArticleListRequest {
	this := &GetArticleListRequest{}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetArticleListResponse(r randyDevRss, easy bool) *GetArticleListResponse {
	this := &GetArticleListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.List = make([]*AuthorArticle, v12)
		for i := 0; i < v12; i++ {
			this.List[i] = NewPopulatedAuthorArticle(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateArticleRequest(r randyDevRss, easy bool) *UpdateArticleRequest {
	this := &UpdateArticleRequest{}
	this.ArticleId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ArticleId *= -1
	}
	this.UpdateType = UpdateArticleType([]int32{0, 1, 2}[r.Intn(3)])
	this.IsAd = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.IsAd *= -1
	}
	this.CategoryId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CategoryId *= -1
	}
	this.IsChosen = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.IsChosen *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateArticleResponse(r randyDevRss, easy bool) *UpdateArticleResponse {
	this := &UpdateArticleResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetInclusionAuthorListRequest(r randyDevRss, easy bool) *GetInclusionAuthorListRequest {
	this := &GetInclusionAuthorListRequest{}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetInclusionAuthorListResponse(r randyDevRss, easy bool) *GetInclusionAuthorListResponse {
	this := &GetInclusionAuthorListResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.List = make([]*InclusionAuthor, v13)
		for i := 0; i < v13; i++ {
			this.List[i] = NewPopulatedInclusionAuthor(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConfirmInclusionAuthorRequest(r randyDevRss, easy bool) *ConfirmInclusionAuthorRequest {
	this := &ConfirmInclusionAuthorRequest{}
	this.InclusionAuthorId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.InclusionAuthorId *= -1
	}
	this.CategoryId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CategoryId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConfirmInclusionAuthorResponse(r randyDevRss, easy bool) *ConfirmInclusionAuthorResponse {
	this := &ConfirmInclusionAuthorResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDevRss interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDevRss(r randyDevRss) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDevRss(r randyDevRss) string {
	v14 := r.Intn(100)
	tmps := make([]rune, v14)
	for i := 0; i < v14; i++ {
		tmps[i] = randUTF8RuneDevRss(r)
	}
	return string(tmps)
}
func randUnrecognizedDevRss(r randyDevRss, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDevRss(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDevRss(dAtA []byte, r randyDevRss, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDevRss(dAtA, uint64(key))
		v15 := r.Int63()
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		dAtA = encodeVarintPopulateDevRss(dAtA, uint64(v15))
	case 1:
		dAtA = encodeVarintPopulateDevRss(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDevRss(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDevRss(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDevRss(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDevRss(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDevRss(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *Category) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDevRss(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *Author) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDevRss(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.IsFollowed {
		n += 2
	}
	return n
}

func (m *AuthorCategory) Size() (n int) {
	var l int
	_ = l
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *InclusionAuthor) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDevRss(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDevRss(uint64(m.Status))
	}
	return n
}

func (m *Article) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDevRss(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.CoverSmall)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.CoverBig)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovDevRss(uint64(m.Timestamp))
	}
	if m.VisitTime != 0 {
		n += 1 + sovDevRss(uint64(m.VisitTime))
	}
	if m.IsAd {
		n += 2
	}
	if m.IsChosen {
		n += 2
	}
	l = len(m.QrcodeUrl)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.SrcLink)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *AuthorArticle) Size() (n int) {
	var l int
	_ = l
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.Article != nil {
		l = m.Article.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *AuthorPubArticle) Size() (n int) {
	var l int
	_ = l
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *UploadMsgRequest) Size() (n int) {
	var l int
	_ = l
	if m.UploadType != 0 {
		n += 1 + sovDevRss(uint64(m.UploadType))
	}
	if m.MsgType != 0 {
		n += 1 + sovDevRss(uint64(m.MsgType))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.FromUserName)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.FromNickName)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	l = len(m.FromHeadImgUrl)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *UploadMsgResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *GetCategoryListRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetCategoryListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *GetCategoryArticleListRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.IsChosen {
		n += 2
	}
	if m.CategoryId != 0 {
		n += 1 + sovDevRss(uint64(m.CategoryId))
	}
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetCategoryArticleListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *GetUserFollowArticleListRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetUserFollowArticleListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *GetArticleDetailRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.ArticleId != 0 {
		n += 1 + sovDevRss(uint64(m.ArticleId))
	}
	return n
}

func (m *GetArticleDetailResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.Article != nil {
		l = m.Article.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *GetArticleShareRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.ArticleId != 0 {
		n += 1 + sovDevRss(uint64(m.ArticleId))
	}
	return n
}

func (m *GetArticleShareResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.Article != nil {
		l = m.Article.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *ArticleCollectStatusRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.ArticleId != 0 {
		n += 1 + sovDevRss(uint64(m.ArticleId))
	}
	return n
}

func (m *ArticleCollectStatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.CollectStatus {
		n += 2
	}
	return n
}

func (m *ArticleCollectUncollectRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.ArticleId != 0 {
		n += 1 + sovDevRss(uint64(m.ArticleId))
	}
	if m.Collect != 0 {
		n += 1 + sovDevRss(uint64(m.Collect))
	}
	return n
}

func (m *ArticleCollectUncollectResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *SearchAuthorRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *SearchAuthorResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *GetHotSearchRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	return n
}

func (m *GetHotSearchResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *GetAuthorDetailRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.AuthorId != 0 {
		n += 1 + sovDevRss(uint64(m.AuthorId))
	}
	return n
}

func (m *GetAuthorDetailResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.IfFollowed {
		n += 2
	}
	return n
}

func (m *GetAuthorArticleListRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.AuthorId != 0 {
		n += 1 + sovDevRss(uint64(m.AuthorId))
	}
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetAuthorArticleListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *UserFollowUnfollowRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.AuthorId != 0 {
		n += 1 + sovDevRss(uint64(m.AuthorId))
	}
	if m.Follow != 0 {
		n += 1 + sovDevRss(uint64(m.Follow))
	}
	return n
}

func (m *UserFollowUnfollowResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *UserFollowStatusRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.AuthorId != 0 {
		n += 1 + sovDevRss(uint64(m.AuthorId))
	}
	return n
}

func (m *UserFollowStatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.FollowStatus {
		n += 2
	}
	return n
}

func (m *GetUserFollowListRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetUserFollowListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *GetUserFootprintRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetUserFootprintResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *GetUserCollectListRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetUserCollectListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *InclusionAuthorRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDevRss(uint64(m.UserId))
	}
	if m.CategoryId != 0 {
		n += 1 + sovDevRss(uint64(m.CategoryId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *InclusionAuthorResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if m.InclusionStatus != 0 {
		n += 1 + sovDevRss(uint64(m.InclusionStatus))
	}
	return n
}

func (m *CreateCategoryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *CreateCategoryResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *CreateAuthorRequest) Size() (n int) {
	var l int
	_ = l
	if m.CategoryId != 0 {
		n += 1 + sovDevRss(uint64(m.CategoryId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *CreateAuthorResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *UpdateAuthorRequest) Size() (n int) {
	var l int
	_ = l
	if m.AuthorId != 0 {
		n += 1 + sovDevRss(uint64(m.AuthorId))
	}
	if m.UpdateType != 0 {
		n += 1 + sovDevRss(uint64(m.UpdateType))
	}
	if m.CategoryId != 0 {
		n += 1 + sovDevRss(uint64(m.CategoryId))
	}
	return n
}

func (m *UpdateAuthorResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *GetAuthorListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetAuthorListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *GetArticleListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetArticleListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *UpdateArticleRequest) Size() (n int) {
	var l int
	_ = l
	if m.ArticleId != 0 {
		n += 1 + sovDevRss(uint64(m.ArticleId))
	}
	if m.UpdateType != 0 {
		n += 1 + sovDevRss(uint64(m.UpdateType))
	}
	if m.IsAd != 0 {
		n += 1 + sovDevRss(uint64(m.IsAd))
	}
	if m.CategoryId != 0 {
		n += 1 + sovDevRss(uint64(m.CategoryId))
	}
	if m.IsChosen != 0 {
		n += 1 + sovDevRss(uint64(m.IsChosen))
	}
	return n
}

func (m *UpdateArticleResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func (m *GetInclusionAuthorListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovDevRss(uint64(m.Offset))
	}
	if m.Num != 0 {
		n += 1 + sovDevRss(uint64(m.Num))
	}
	return n
}

func (m *GetInclusionAuthorListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDevRss(uint64(l))
		}
	}
	return n
}

func (m *ConfirmInclusionAuthorRequest) Size() (n int) {
	var l int
	_ = l
	if m.InclusionAuthorId != 0 {
		n += 1 + sovDevRss(uint64(m.InclusionAuthorId))
	}
	if m.CategoryId != 0 {
		n += 1 + sovDevRss(uint64(m.CategoryId))
	}
	return n
}

func (m *ConfirmInclusionAuthorResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevRss(uint64(l))
	}
	return n
}

func sovDevRss(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDevRss(x uint64) (n int) {
	return sovDevRss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Category) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Category: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Category: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Author) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Author: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Author: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &Author{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &Category{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InclusionAuthor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InclusionAuthor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InclusionAuthor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Article) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Article: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Article: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverSmall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverSmall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitTime", wireType)
			}
			m.VisitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAd = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChosen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChosen = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrcodeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrcodeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &Author{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Article == nil {
				m.Article = &Article{}
			}
			if err := m.Article.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &Category{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorPubArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorPubArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorPubArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &Author{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Article{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadType", wireType)
			}
			m.UploadType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadType |= (UploadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromUserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromNickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromHeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCategoryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCategoryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Category{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCategoryArticleListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoryArticleListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoryArticleListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChosen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChosen = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCategoryArticleListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCategoryArticleListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCategoryArticleListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AuthorArticle{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserFollowArticleListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserFollowArticleListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserFollowArticleListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserFollowArticleListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserFollowArticleListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserFollowArticleListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AuthorPubArticle{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArticleDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArticleDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArticleDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArticleDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArticleDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArticleDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Article == nil {
				m.Article = &AuthorArticle{}
			}
			if err := m.Article.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArticleShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArticleShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArticleShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArticleShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArticleShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArticleShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Article == nil {
				m.Article = &AuthorArticle{}
			}
			if err := m.Article.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleCollectStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleCollectStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleCollectStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleCollectStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleCollectStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleCollectStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleCollectUncollectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleCollectUncollectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleCollectUncollectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collect", wireType)
			}
			m.Collect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collect |= (ArticleCollect(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleCollectUncollectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleCollectUncollectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleCollectUncollectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAuthorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAuthorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAuthorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAuthorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAuthorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAuthorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Author{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotSearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotSearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotSearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotSearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotSearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotSearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Author{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &Author{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfFollowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IfFollowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorArticleListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorArticleListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorArticleListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorArticleListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorArticleListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorArticleListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Article{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserFollowUnfollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFollowUnfollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFollowUnfollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			m.Follow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Follow |= (UserFollow(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserFollowUnfollowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFollowUnfollowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFollowUnfollowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserFollowStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFollowStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFollowStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserFollowStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFollowStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFollowStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FollowStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserFollowListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserFollowListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserFollowListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserFollowListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserFollowListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserFollowListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Author{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserFootprintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserFootprintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserFootprintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserFootprintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserFootprintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserFootprintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Article{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserCollectListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCollectListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCollectListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserCollectListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCollectListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCollectListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Article{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InclusionAuthorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InclusionAuthorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InclusionAuthorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InclusionAuthorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InclusionAuthorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InclusionAuthorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclusionStatus", wireType)
			}
			m.InclusionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InclusionStatus |= (InclusionStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAuthorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAuthorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAuthorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAuthorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAuthorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAuthorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= (UpdateAuthorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AuthorCategory{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArticleListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArticleListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArticleListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArticleListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArticleListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArticleListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AuthorArticle{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateArticleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateArticleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateArticleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= (UpdateArticleType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAd", wireType)
			}
			m.IsAd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAd |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChosen", wireType)
			}
			m.IsChosen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsChosen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateArticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateArticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateArticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInclusionAuthorListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInclusionAuthorListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInclusionAuthorListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInclusionAuthorListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInclusionAuthorListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInclusionAuthorListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &InclusionAuthor{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmInclusionAuthorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmInclusionAuthorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmInclusionAuthorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclusionAuthorId", wireType)
			}
			m.InclusionAuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InclusionAuthorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmInclusionAuthorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmInclusionAuthorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmInclusionAuthorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevRss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevRss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevRss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevRss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevRss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevRss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDevRss
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDevRss
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDevRss(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDevRss = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevRss   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dev-rss.proto", fileDescriptorDevRss) }

var fileDescriptorDevRss = []byte{
	// 2279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x1a, 0x4d, 0x6f, 0xdb, 0xc8,
	0x55, 0x94, 0x1c, 0x59, 0x7a, 0xb6, 0x65, 0x7a, 0xfc, 0x45, 0x2b, 0xb1, 0xe4, 0x70, 0xb3, 0x8d,
	0x57, 0x69, 0xbc, 0x89, 0x5b, 0x04, 0x68, 0xbb, 0x40, 0xd7, 0x76, 0xda, 0xc4, 0x8b, 0x4d, 0x9a,
	0xd2, 0xeb, 0x02, 0x0b, 0x6c, 0x2b, 0xd0, 0xe4, 0x48, 0x26, 0x2c, 0x89, 0x0a, 0x3f, 0x1c, 0xb8,
	0x45, 0xf7, 0xd0, 0x6b, 0x0f, 0x3d, 0xf4, 0xd2, 0x4b, 0x81, 0xfe, 0x99, 0x02, 0x7b, 0xec, 0x2f,
	0x30, 0xba, 0xe9, 0xa5, 0xd0, 0xb9, 0x87, 0x1e, 0x17, 0x9c, 0x19, 0x92, 0x33, 0xfc, 0x90, 0xcd,
	0x4d, 0x7c, 0x49, 0x38, 0x6f, 0xde, 0xbc, 0xef, 0xf7, 0x66, 0xde, 0x93, 0x61, 0xc1, 0xc4, 0xe7,
	0x0f, 0x1d, 0xd7, 0xdd, 0x19, 0x3b, 0xb6, 0x67, 0xa3, 0x59, 0x13, 0x9f, 0x77, 0x1d, 0xd7, 0x6d,
	0x3e, 0xec, 0x5b, 0xde, 0xa9, 0x7f, 0xb2, 0x63, 0xd8, 0xc3, 0x8f, 0xfb, 0x76, 0xdf, 0xfe, 0x98,
	0xec, 0x9f, 0xf8, 0x3d, 0xb2, 0x22, 0x0b, 0xf2, 0x45, 0xcf, 0xa9, 0x2f, 0xa0, 0x7a, 0xe4, 0xe9,
	0x9e, 0xef, 0xa2, 0xc7, 0x30, 0x63, 0xd8, 0x26, 0x56, 0xa4, 0x2d, 0x69, 0xbb, 0xb1, 0xbb, 0xbc,
	0xc3, 0x08, 0xee, 0xd0, 0xed, 0x03, 0xdb, 0xc4, 0xfb, 0xb5, 0xc9, 0x65, 0x9b, 0x20, 0x69, 0xe4,
	0x5f, 0x24, 0x43, 0x65, 0xe8, 0xf6, 0x95, 0xf2, 0x96, 0xb4, 0x5d, 0xd7, 0x82, 0x4f, 0xf5, 0x09,
	0xd4, 0x0e, 0x74, 0x0f, 0xf7, 0x6d, 0xe7, 0x02, 0xad, 0x41, 0xd9, 0x32, 0x09, 0xb9, 0xca, 0x7e,
	0x75, 0x72, 0xd9, 0x2e, 0x5b, 0xa6, 0x56, 0xb6, 0x4c, 0x84, 0x60, 0x66, 0xa4, 0x0f, 0x31, 0x3b,
	0x46, 0xbe, 0xd5, 0xaf, 0xa1, 0xba, 0xe7, 0x7b, 0xa7, 0xb6, 0x53, 0xe4, 0x14, 0x5a, 0x83, 0xaa,
	0x7e, 0xae, 0x7b, 0xba, 0xa3, 0x54, 0x08, 0x94, 0xad, 0xd0, 0x23, 0x98, 0xb3, 0xdc, 0x6e, 0xcf,
	0x1e, 0x0c, 0xec, 0x37, 0xd8, 0x54, 0x6a, 0x5b, 0xd2, 0x76, 0x6d, 0x7f, 0x71, 0x72, 0xd9, 0xe6,
	0xc1, 0x1a, 0x58, 0xee, 0x2f, 0xd9, 0xb7, 0x7a, 0x0a, 0x0d, 0xca, 0x3f, 0x92, 0xfe, 0x3e, 0x54,
	0x75, 0x02, 0x21, 0xb2, 0xcc, 0xed, 0x2e, 0x46, 0x06, 0xa1, 0x88, 0x1a, 0xdb, 0x46, 0x0f, 0xa1,
	0x66, 0xb0, 0x43, 0x44, 0xb8, 0xb9, 0xdd, 0xa5, 0x08, 0x35, 0xa4, 0xa6, 0x45, 0x28, 0xaa, 0x0e,
	0x8b, 0x87, 0x23, 0x63, 0xe0, 0xbb, 0x96, 0x3d, 0xfa, 0x1e, 0x2a, 0xab, 0x50, 0x75, 0x89, 0x43,
	0x88, 0xca, 0x95, 0x7d, 0x98, 0x5c, 0xb6, 0x19, 0x44, 0x63, 0xff, 0xab, 0x93, 0x32, 0xcc, 0xee,
	0x39, 0x9e, 0x65, 0x0c, 0x70, 0x2e, 0xed, 0x15, 0xb8, 0xe5, 0x59, 0xde, 0x20, 0x24, 0x4e, 0x17,
	0x48, 0x81, 0x59, 0xd7, 0x1f, 0x0e, 0x75, 0xe7, 0x82, 0x59, 0x34, 0x5c, 0xa2, 0x36, 0xcc, 0x19,
	0xf6, 0x39, 0x76, 0xba, 0xee, 0x50, 0x1f, 0x0c, 0x94, 0x19, 0xb2, 0x0b, 0x04, 0x74, 0x14, 0x40,
	0xd0, 0x6d, 0xa8, 0x53, 0x84, 0x13, 0xab, 0xaf, 0xdc, 0x22, 0xdb, 0x35, 0x02, 0xd8, 0xb7, 0xfa,
	0x81, 0xa3, 0x4c, 0xec, 0xe9, 0xd6, 0x40, 0xa9, 0x52, 0x47, 0xd1, 0x15, 0xba, 0x03, 0x75, 0xcf,
	0x1a, 0x62, 0xd7, 0xd3, 0x87, 0x63, 0x65, 0x36, 0x10, 0x52, 0x8b, 0x01, 0x68, 0x13, 0xe0, 0xdc,
	0x72, 0x2d, 0xaf, 0x1b, 0x80, 0x88, 0x17, 0x2b, 0x5a, 0x9d, 0x40, 0xbe, 0xb0, 0x86, 0x18, 0xb5,
	0xe0, 0x96, 0xe5, 0x76, 0x75, 0x53, 0xa9, 0x13, 0xff, 0xd6, 0x27, 0x97, 0x6d, 0x0a, 0xd0, 0x66,
	0x2c, 0x77, 0xcf, 0x44, 0x1d, 0xa8, 0x5b, 0x6e, 0xd7, 0x38, 0xb5, 0x5d, 0x3c, 0x52, 0x80, 0xe0,
	0x2c, 0x4c, 0x2e, 0xdb, 0x31, 0x50, 0xab, 0x59, 0xee, 0x01, 0xf9, 0x0a, 0x58, 0xbd, 0x76, 0x82,
	0x98, 0xee, 0xfa, 0xce, 0x40, 0x99, 0x23, 0x42, 0xd6, 0x29, 0xe4, 0xd8, 0x19, 0xa0, 0x0d, 0xa8,
	0xb9, 0x8e, 0xd1, 0x1d, 0x58, 0xa3, 0x33, 0x65, 0x9e, 0x19, 0xc6, 0x31, 0x3e, 0xb7, 0x46, 0x67,
	0xea, 0x5f, 0x25, 0x58, 0xa0, 0x7e, 0x0c, 0x4d, 0x7e, 0xed, 0xc8, 0xe9, 0xc0, 0xac, 0x4e, 0xcf,
	0xb0, 0xc0, 0x91, 0x63, 0x4c, 0x0a, 0xd7, 0x42, 0x04, 0x21, 0xca, 0x2a, 0xd7, 0x89, 0x32, 0x99,
	0x32, 0x7b, 0xe5, 0x9f, 0x14, 0x96, 0xeb, 0x1e, 0xcc, 0x0c, 0x2c, 0xd7, 0x53, 0xca, 0x5b, 0x95,
	0x4c, 0xa1, 0xc8, 0xae, 0xfa, 0x3f, 0x09, 0xe4, 0xe3, 0xf1, 0xc0, 0xd6, 0xcd, 0x17, 0x6e, 0x5f,
	0xc3, 0xaf, 0x7d, 0xec, 0x7a, 0xe8, 0xc7, 0x30, 0xe7, 0x13, 0x58, 0xd7, 0xbb, 0x18, 0xa7, 0x6b,
	0x09, 0xc5, 0xff, 0xe2, 0x62, 0x8c, 0x35, 0xf0, 0xa3, 0xef, 0xc0, 0xbc, 0x43, 0xb7, 0x4f, 0x8f,
	0x94, 0x89, 0x9b, 0x67, 0x87, 0x6e, 0x9f, 0x6c, 0x29, 0x30, 0x6b, 0xd8, 0x23, 0x0f, 0x8f, 0xbc,
	0x30, 0x22, 0xd9, 0x12, 0xdd, 0x83, 0x46, 0xcf, 0xb1, 0x87, 0x5d, 0xdf, 0xc5, 0x4e, 0x97, 0xe4,
	0x09, 0x0d, 0xca, 0xf9, 0x00, 0x7a, 0xec, 0x62, 0xe7, 0x65, 0x90, 0x2f, 0x21, 0xd6, 0xc8, 0x32,
	0xce, 0x28, 0xd6, 0xad, 0x18, 0xeb, 0xa5, 0x65, 0x9c, 0x11, 0xac, 0x8f, 0x60, 0x89, 0x60, 0x9d,
	0x62, 0xdd, 0xec, 0x5a, 0xc3, 0x3e, 0x89, 0x02, 0x1a, 0xaa, 0xe4, 0xf8, 0x73, 0xac, 0x9b, 0x87,
	0xc3, 0xfe, 0xb1, 0x33, 0x50, 0x3f, 0x81, 0x25, 0x4e, 0x6b, 0x77, 0x6c, 0x8f, 0x5c, 0x62, 0x5a,
	0x96, 0x95, 0x49, 0xd3, 0x1e, 0x89, 0xa9, 0xa9, 0xc0, 0xda, 0x33, 0xec, 0x85, 0x0e, 0xfb, 0xdc,
	0x72, 0x3d, 0x66, 0x39, 0xd5, 0x82, 0xf5, 0xd4, 0x4e, 0x41, 0xea, 0xe8, 0x43, 0xc1, 0x71, 0x19,
	0x01, 0x42, 0x3d, 0xf7, 0x0f, 0x09, 0x36, 0x39, 0x5e, 0xcc, 0xad, 0x9c, 0x30, 0x68, 0x1d, 0x66,
	0x89, 0x59, 0xc3, 0xd2, 0xa1, 0x55, 0x83, 0xe5, 0xa1, 0x19, 0x64, 0x79, 0x9c, 0x53, 0x81, 0xab,
	0x6a, 0x5c, 0x12, 0x05, 0x35, 0x82, 0xd1, 0x0c, 0x4e, 0x92, 0x02, 0xa5, 0x41, 0x08, 0x3a, 0x34,
	0x83, 0x32, 0x60, 0xf7, 0x7a, 0x2e, 0xf6, 0x88, 0xab, 0x2a, 0x1a, 0x5b, 0x05, 0xf7, 0xc8, 0xc8,
	0x1f, 0x12, 0xcf, 0x54, 0xb4, 0xe0, 0x53, 0xf5, 0xa1, 0x95, 0x27, 0x61, 0x51, 0xa3, 0x74, 0x04,
	0xa3, 0xac, 0x25, 0x82, 0x5e, 0x8c, 0x69, 0x13, 0xda, 0xcf, 0xb0, 0x17, 0x04, 0x0f, 0xbd, 0x19,
	0x8a, 0x98, 0x26, 0x56, 0xae, 0x9c, 0xa5, 0x5c, 0x25, 0x56, 0xee, 0xf7, 0xb0, 0x95, 0xcf, 0xa5,
	0xa8, 0x7a, 0x0f, 0x05, 0xf5, 0x36, 0x12, 0xea, 0xc5, 0xe9, 0xcf, 0x34, 0xfc, 0x35, 0x09, 0x33,
	0x06, 0x7b, 0x4a, 0xaa, 0xf0, 0x95, 0x9a, 0x6d, 0x02, 0xb0, 0x32, 0x14, 0xec, 0x51, 0xed, 0xea,
	0x0c, 0x72, 0x68, 0xaa, 0x3e, 0x28, 0x69, 0x92, 0x45, 0xd5, 0x78, 0x94, 0xac, 0x85, 0x79, 0x8e,
	0x0a, 0xd1, 0xd4, 0x57, 0x24, 0x95, 0x18, 0xf8, 0xe8, 0x54, 0x77, 0xf0, 0xbb, 0x2a, 0xe2, 0xf1,
	0xb6, 0x61, 0x14, 0x6f, 0x5e, 0x8f, 0x63, 0xb8, 0xcd, 0x60, 0x07, 0xf6, 0x60, 0x80, 0x0d, 0x8f,
	0x51, 0x7c, 0x47, 0x65, 0xfe, 0x24, 0xc1, 0x9d, 0x6c, 0xba, 0x45, 0x55, 0xfa, 0x09, 0x34, 0x0c,
	0x4a, 0xa1, 0xcb, 0x0e, 0x90, 0xc4, 0xdf, 0x47, 0x93, 0xcb, 0x76, 0x62, 0x47, 0x5b, 0x30, 0x78,
	0x5e, 0xea, 0x9f, 0x25, 0x68, 0x89, 0x42, 0x1c, 0x8f, 0x18, 0xc6, 0x3b, 0xea, 0x87, 0x1e, 0x07,
	0x17, 0x03, 0xa1, 0x44, 0x52, 0xab, 0xb1, 0xbb, 0x9e, 0xbc, 0xa7, 0x18, 0x47, 0x2d, 0xc4, 0x53,
	0x3f, 0x83, 0x76, 0xae, 0x30, 0x45, 0x0b, 0xf9, 0x73, 0x58, 0x3e, 0xc2, 0xba, 0x63, 0x9c, 0xb2,
	0xbb, 0xf3, 0x2a, 0x6d, 0x14, 0x98, 0x3d, 0xc3, 0x17, 0x6f, 0x6c, 0xc7, 0x64, 0x2f, 0xae, 0x70,
	0xa9, 0x9a, 0xb0, 0x22, 0x52, 0x2a, 0xea, 0x9f, 0x0f, 0x84, 0x0a, 0x90, 0xba, 0xd5, 0x69, 0xde,
	0xef, 0xc0, 0xf2, 0x33, 0xec, 0x3d, 0xb7, 0x3d, 0xca, 0xeb, 0x2a, 0x79, 0x03, 0xa9, 0x44, 0xfc,
	0x1b, 0x91, 0xea, 0x25, 0xcd, 0x61, 0x02, 0xba, 0x66, 0x31, 0xba, 0x0d, 0x75, 0xfa, 0x4c, 0x89,
	0xa3, 0xa2, 0x46, 0x01, 0x87, 0xa6, 0xfa, 0x77, 0x89, 0xa6, 0xb0, 0x40, 0xb0, 0xa8, 0xe4, 0xf1,
	0x3b, 0xa9, 0x3c, 0xfd, 0x9d, 0x14, 0xb4, 0x19, 0xbd, 0xb8, 0xcd, 0xa8, 0x70, 0x6d, 0x46, 0x8f,
	0x6f, 0x33, 0x7a, 0x51, 0x9b, 0xf1, 0x47, 0xb8, 0x1d, 0x89, 0x57, 0xf0, 0xda, 0xcd, 0x55, 0x9a,
	0xbb, 0x78, 0x2a, 0x59, 0x17, 0xcf, 0x4c, 0x7c, 0xf1, 0x0c, 0xe1, 0x4e, 0x36, 0xfb, 0xa2, 0x26,
	0xba, 0xde, 0x0b, 0xf1, 0x6b, 0xd8, 0x88, 0x2f, 0xb9, 0xe3, 0x11, 0xb5, 0xc8, 0xbb, 0xe9, 0xfa,
	0x00, 0xaa, 0x94, 0x0c, 0x4b, 0x7a, 0xee, 0x69, 0x19, 0x71, 0xd2, 0x18, 0x8a, 0xfa, 0x0b, 0x68,
	0x66, 0xf1, 0x2f, 0x9a, 0xea, 0xbf, 0x82, 0xf5, 0x98, 0xcc, 0x35, 0x8b, 0xf3, 0xd4, 0x28, 0xfd,
	0x03, 0x28, 0x69, 0x82, 0x45, 0x5d, 0xf0, 0x04, 0x16, 0xa8, 0x42, 0x62, 0x51, 0x5e, 0x9a, 0x5c,
	0xb6, 0xc5, 0x0d, 0x6d, 0xbe, 0xc7, 0x31, 0x52, 0x7f, 0x4b, 0x6e, 0xeb, 0x98, 0xff, 0x7b, 0x7e,
	0xdb, 0x58, 0xb0, 0x91, 0x41, 0xfe, 0x46, 0x8a, 0xc7, 0x57, 0x24, 0xd7, 0x29, 0x2b, 0xdb, 0x1b,
	0x3b, 0xd6, 0xe8, 0xfd, 0x2a, 0xa2, 0xa4, 0xa9, 0xdf, 0x4c, 0x9e, 0xfc, 0x2e, 0xb2, 0x19, 0xbb,
	0x97, 0xde, 0xb3, 0x4f, 0xce, 0xa0, 0x99, 0x45, 0xff, 0x66, 0x94, 0xe9, 0xc1, 0x5a, 0x62, 0xbe,
	0x71, 0xa5, 0x26, 0x89, 0xbe, 0xa1, 0x9c, 0xea, 0x1b, 0xc2, 0x41, 0x48, 0x85, 0x9b, 0x18, 0x05,
	0xa5, 0x3e, 0xc5, 0xa8, 0xa8, 0x4a, 0x5f, 0x82, 0x6c, 0x85, 0x34, 0xf8, 0x3c, 0x6a, 0xec, 0x2a,
	0xd1, 0x91, 0x88, 0x09, 0x3d, 0xbb, 0xbf, 0x32, 0xb9, 0x6c, 0xa7, 0x4e, 0x69, 0x8b, 0x96, 0x88,
	0xa6, 0x3e, 0x80, 0xd5, 0x03, 0x07, 0xeb, 0x1e, 0x8e, 0x9a, 0x2f, 0x66, 0x86, 0x50, 0x19, 0x89,
	0x53, 0x66, 0x0f, 0xd6, 0x92, 0xc8, 0x45, 0xab, 0xd4, 0x67, 0xb0, 0x4c, 0x49, 0x88, 0x46, 0x4f,
	0xd8, 0x56, 0xca, 0xb5, 0x2d, 0x3f, 0x8d, 0xfb, 0x39, 0xac, 0x88, 0xb4, 0x8a, 0x0a, 0xf3, 0x17,
	0x09, 0x96, 0x8f, 0xc7, 0x66, 0x4a, 0x1a, 0xa1, 0x2c, 0x4a, 0x89, 0xda, 0xfe, 0x53, 0x98, 0xf3,
	0xc9, 0x99, 0x78, 0x10, 0xd0, 0xe0, 0x1a, 0x1a, 0x9e, 0x5e, 0x38, 0x41, 0x08, 0x20, 0x64, 0x4c,
	0x70, 0x55, 0xeb, 0x19, 0xa8, 0x24, 0x0a, 0x54, 0x54, 0xa5, 0x4f, 0xc9, 0x83, 0x88, 0x9e, 0xe6,
	0xf3, 0x33, 0x4e, 0x43, 0x29, 0x2b, 0x0d, 0xcb, 0xfc, 0xed, 0xbb, 0x9a, 0xa0, 0x50, 0x34, 0x5c,
	0x1f, 0x08, 0x19, 0xb8, 0x9e, 0x28, 0x8b, 0x89, 0x2e, 0x7f, 0x8f, 0xb2, 0x4b, 0xbf, 0x32, 0x8a,
	0x48, 0xbc, 0x96, 0x24, 0x71, 0x93, 0xdd, 0xf7, 0x3f, 0xa5, 0xc8, 0x49, 0x0c, 0xce, 0x24, 0x16,
	0x5b, 0x01, 0x29, 0xd9, 0x0a, 0xfc, 0x2c, 0x2b, 0x70, 0x9a, 0xc9, 0xc0, 0xa1, 0xe8, 0xa9, 0xc8,
	0x59, 0x0e, 0xa7, 0x88, 0x34, 0x66, 0xe8, 0xe8, 0x30, 0x11, 0x4e, 0x33, 0xa9, 0xac, 0x11, 0xe6,
	0x20, 0x74, 0x6e, 0x11, 0xcd, 0x41, 0xd4, 0x4f, 0x61, 0x35, 0xa1, 0x46, 0xd1, 0x60, 0x3b, 0x24,
	0x03, 0x9a, 0x44, 0x79, 0xfb, 0x7e, 0x3e, 0x7c, 0x43, 0x26, 0x29, 0x99, 0xa4, 0x8a, 0xfa, 0xf2,
	0x87, 0x82, 0x2f, 0x33, 0x2a, 0xa4, 0x70, 0x3d, 0x8f, 0x61, 0xf3, 0xc0, 0x1e, 0xf5, 0x2c, 0x67,
	0x98, 0x73, 0x1f, 0xec, 0xc0, 0x72, 0x5c, 0x46, 0x93, 0x65, 0x61, 0xc9, 0x12, 0x0f, 0x5d, 0xe3,
	0x9a, 0x50, 0x0f, 0xa1, 0x95, 0xc7, 0xb1, 0xa0, 0xaa, 0x9d, 0x23, 0x80, 0xf8, 0x77, 0x0f, 0x84,
	0xa0, 0x41, 0xe1, 0x5d, 0xd7, 0x37, 0x0c, 0xec, 0xba, 0x72, 0x09, 0x6d, 0xc0, 0x2a, 0x83, 0x59,
	0x23, 0x0f, 0x3b, 0x23, 0x7d, 0xd0, 0xc5, 0x8e, 0x63, 0x3b, 0xb2, 0x84, 0xd6, 0x00, 0xb1, 0xad,
	0xb1, 0xee, 0xe8, 0x43, 0x06, 0x2f, 0x77, 0x9e, 0x00, 0xc4, 0x03, 0x50, 0xb4, 0x02, 0xb2, 0x83,
	0x0d, 0x6c, 0x9d, 0xe3, 0x6e, 0x38, 0xfc, 0x94, 0x4b, 0x01, 0xab, 0x10, 0x4a, 0x4d, 0x22, 0x4b,
	0x9d, 0x4f, 0xa0, 0x21, 0xf6, 0xad, 0x68, 0x19, 0x16, 0xc3, 0x84, 0x60, 0x1d, 0xac, 0x5c, 0x42,
	0xab, 0xb0, 0x14, 0x02, 0xfd, 0xb0, 0xb1, 0x95, 0xa5, 0xce, 0x23, 0x80, 0xf8, 0x39, 0x86, 0x16,
	0x61, 0x8e, 0x5c, 0xc2, 0xf4, 0x4d, 0x28, 0x97, 0xd0, 0x12, 0x2c, 0x10, 0x80, 0xcf, 0xde, 0xc7,
	0xb2, 0xd4, 0xd9, 0xe3, 0x7e, 0xa2, 0x60, 0x3f, 0x0e, 0xad, 0x0b, 0xbe, 0x1a, 0x38, 0x58, 0xbf,
	0xe8, 0x5a, 0x23, 0xca, 0x94, 0xbb, 0x0b, 0x99, 0x75, 0xa4, 0xce, 0x63, 0x90, 0x93, 0xf5, 0x1a,
	0x6d, 0xc2, 0x06, 0x4b, 0x53, 0xe6, 0x6c, 0xce, 0x9b, 0x72, 0xa9, 0x73, 0x04, 0x4b, 0xa9, 0x4c,
	0x45, 0x32, 0xcc, 0xb3, 0x33, 0x24, 0x49, 0xe5, 0x52, 0x60, 0x5c, 0x06, 0xe1, 0x8f, 0x4b, 0x81,
	0x39, 0x63, 0x4c, 0x9a, 0x98, 0x72, 0x79, 0xf7, 0xbf, 0x08, 0x16, 0x9e, 0xe2, 0x73, 0xcd, 0x75,
	0x8f, 0xb0, 0x73, 0x6e, 0x19, 0x18, 0x3d, 0x85, 0x7a, 0x34, 0xbf, 0x45, 0x1b, 0x89, 0xc9, 0x74,
	0x3c, 0xc9, 0x6e, 0x36, 0xb3, 0xb6, 0x68, 0x18, 0xa9, 0x25, 0xf4, 0x1b, 0x58, 0x4c, 0x4c, 0x6b,
	0x51, 0x3b, 0x3a, 0x90, 0x3d, 0xe1, 0x6d, 0x6e, 0xe5, 0x23, 0x44, 0x74, 0xcf, 0x84, 0xf9, 0x30,
	0x57, 0x79, 0xd1, 0x0f, 0xb2, 0x4e, 0xa7, 0xab, 0x7b, 0xf3, 0xfe, 0x95, 0x78, 0x11, 0xb3, 0xd7,
	0x89, 0x56, 0x80, 0x67, 0xb7, 0xcd, 0x93, 0x99, 0x36, 0x10, 0x6d, 0x7e, 0x74, 0x0d, 0xcc, 0x88,
	0xe5, 0x97, 0x20, 0x27, 0x67, 0x85, 0x48, 0xb0, 0x4b, 0xd6, 0x64, 0xb2, 0x79, 0x77, 0x0a, 0x46,
	0xc2, 0x25, 0xfc, 0xf4, 0x4e, 0x74, 0x49, 0xc6, 0xa4, 0xb0, 0xb9, 0x95, 0x8f, 0x10, 0xd1, 0xc5,
	0xb0, 0x92, 0x35, 0x47, 0x43, 0xf7, 0x72, 0xe6, 0x4d, 0x42, 0x87, 0xd8, 0xfc, 0xf0, 0x0a, 0xac,
	0x88, 0xcd, 0x08, 0xd6, 0x73, 0x86, 0x53, 0xe8, 0x7e, 0x0e, 0x8d, 0xe4, 0x2c, 0xad, 0xb9, 0x7d,
	0x35, 0x62, 0xc4, 0xef, 0x05, 0xcc, 0xf3, 0x63, 0x27, 0x74, 0x27, 0x2e, 0x85, 0xe9, 0xb9, 0x56,
	0x73, 0x33, 0x67, 0x97, 0x27, 0xc7, 0xcf, 0x8b, 0x38, 0x72, 0x19, 0x63, 0x27, 0x8e, 0x5c, 0xd6,
	0x90, 0x29, 0x76, 0x26, 0x37, 0xc7, 0x49, 0x38, 0x33, 0x3d, 0x32, 0x4a, 0x38, 0x33, 0x63, 0x04,
	0x44, 0x9d, 0x99, 0x35, 0x01, 0xe1, 0x9c, 0x39, 0x65, 0x3e, 0xc3, 0x39, 0x73, 0xda, 0x18, 0x45,
	0x2d, 0xa1, 0x2e, 0xa0, 0xf4, 0xe4, 0x01, 0xa9, 0x19, 0xc3, 0x8a, 0xc4, 0x58, 0xa4, 0xf9, 0xc1,
	0x54, 0x1c, 0x3e, 0x8f, 0x92, 0x23, 0x04, 0x2e, 0x8f, 0x72, 0xc6, 0x15, 0x5c, 0x1e, 0xe5, 0xcd,
	0x1f, 0xd4, 0x12, 0xfa, 0x0a, 0x96, 0x52, 0x1d, 0x3c, 0xba, 0x9b, 0x9d, 0xe4, 0xbc, 0x71, 0xd4,
	0x69, 0x28, 0x89, 0x02, 0x20, 0xb4, 0xd5, 0x62, 0x01, 0xc8, 0xea, 0xe7, 0x9b, 0x77, 0xa7, 0x60,
	0xf0, 0x46, 0x4f, 0xb7, 0xb9, 0x28, 0x25, 0x56, 0xba, 0xc7, 0xe6, 0x8c, 0x9e, 0xdf, 0x27, 0xd3,
	0xa0, 0x4c, 0xfe, 0x74, 0xdf, 0xce, 0x7d, 0x04, 0xa5, 0x82, 0x32, 0xe7, 0x4d, 0xa2, 0x96, 0xd0,
	0x11, 0x34, 0xc4, 0xee, 0x0f, 0xb5, 0xe2, 0x9f, 0xee, 0xb2, 0x7a, 0xc8, 0x66, 0x3b, 0x77, 0x9f,
	0x4f, 0x48, 0xbe, 0x87, 0xe3, 0x12, 0x32, 0xa3, 0x4d, 0xe4, 0x12, 0x32, 0xab, 0xf1, 0xa3, 0xe4,
	0xf8, 0x0b, 0x9d, 0x23, 0x97, 0xd1, 0xe7, 0x71, 0xe4, 0xb2, 0x9a, 0x2e, 0xb5, 0x84, 0x5e, 0xc1,
	0x82, 0xd0, 0x0b, 0xa1, 0xcd, 0x74, 0x6a, 0xf1, 0x1e, 0x6a, 0xe5, 0x6d, 0xf3, 0x46, 0x14, 0x7b,
	0x15, 0xd4, 0xca, 0x28, 0xee, 0x3c, 0xcd, 0x76, 0xee, 0x3e, 0x2f, 0xa6, 0xf0, 0x26, 0x41, 0x9b,
	0xd9, 0x5d, 0x45, 0x5a, 0xcc, 0xcc, 0x06, 0x20, 0xba, 0xe0, 0x33, 0x9e, 0xe3, 0xe2, 0x05, 0x9f,
	0xff, 0xf4, 0x17, 0x2f, 0xf8, 0x29, 0xef, 0x7a, 0xca, 0x2c, 0xfb, 0x41, 0xcc, 0x31, 0x9b, 0xfa,
	0x46, 0xe7, 0x98, 0x4d, 0x7f, 0x59, 0xab, 0xa5, 0x7d, 0xe5, 0x9b, 0x6f, 0x5b, 0xa5, 0xff, 0x7f,
	0xdb, 0x92, 0xbe, 0x79, 0xdb, 0x92, 0xfe, 0xf5, 0xb6, 0x25, 0xfd, 0xfb, 0x6d, 0x4b, 0xfa, 0xdb,
	0x7f, 0x5a, 0xa5, 0x93, 0x2a, 0xf9, 0x53, 0xa3, 0x1f, 0x7d, 0x17, 0x00, 0x00, 0xff, 0xff, 0xcc,
	0x81, 0xa3, 0x22, 0xb3, 0x24, 0x00, 0x00,
}
